/* ver.0.0.0 */
/*===============================================================================================================================*/
/* アクティビティ図取得                                                                                                          */
/*                                                                                                                               */
/*                                                                                                                               */
/*===============================================================================================================================*/
/*===============================================================================================================================*/
/* 定数宣言                                                                                                                      */
/*                                                                                                                               */
/*===============================================================================================================================*/

/*===============================================================================================================================*/
/* 変数宣言                                                                                                                      */
/*                                                                                                                               */
/*===============================================================================================================================*/

/*===============================================================================================================================*/
/* 関数宣言                                                                                                                      */
/*                                                                                                                               */
/*===============================================================================================================================*/
/*===============================================================================================================================*/
/**
 * 指定された関数から始まるアクティビティ図のPlantUMLテキストを生成します。
 *
 * @param {Array<Object>} allStatementList - 全ステートメントのリスト
 *     - { Type, Statement, TokenListIndex } の配列
 *     - {string} Type                     - ステートメントのタイプ (例: "if", "else", "for")
 *     - {string} Statement                - ステートメントのテキスト (例: 条件、関数名)
 *     - {number} TokenListIndex           - 元のトークンリスト内のインデックス
 * @returns {string}                       PlantUML形式のアクティビティ図テキスト
 */
/*===============================================================================================================================*/
function generateActivityDiagram(statementList) {
    let activityElements = [];

    /**************************************************************************/
    activityElements = "@startuml\n";
    activityElements += "title " + statementList[0].Statement + ":アクティビティ図\n\n";
    activityElements += "start\n";
    /**************************************************************************/

    for (let i = 2; i < statementList.length; i++) {
        switch (statementList[i].Type) {
            /**************************************************************************/
            /* if文                                                                   */
            /**************************************************************************/
            case "if":
                activityElements += `if (${statementList[i].Statement}) then (yes)\n`;
                break;

            case "End_if":
                if ( (i + 1) == statementList.length ) {
                    activityElements += "endif\n";
                }
                if ( ((i + 1) < statementList.length)
                  && (statementList[i + 1].Type != "else")            // else文なし
                  && (statementList[i + 1].Type != "else_if") ) {     // else_if文なし
                    activityElements += "endif\n";
                }
                break;

            /**************************************************************************/
            /* else文                                                                 */
            /**************************************************************************/
            case "else":
                activityElements += "else (no)\n";
                break;

            case "End_else":
                activityElements += "endif\n";
                break;

            /**************************************************************************/
            /* else_if文                                                              */
            /**************************************************************************/
            case "else_if":
                activityElements += `(no) elseif (${statementList[i].Statement}) then (yes)\n`;
                break;

            case "End_else_if":
                if ( (i + 1) == statementList.length ) {
                    activityElements += "endif\n";
                }
                if ( ((i + 1) < statementList.length)
                  && (statementList[i + 1].Type != "else")            // else文なし
                  && (statementList[i + 1].Type != "else_if") ) {     // else_if文なし
                    activityElements += "endif\n";
                }
                break;

            /**************************************************************************/
            /* while文・for文                                                         */
            /**************************************************************************/
            case "while":
            case "for":
                activityElements += `while (${statementList[i].Statement}) is (yes)\n`;
                break;

            case "End_while":
            case "End_for":
                activityElements += "endwhile (no)\n";
                break;

            /**************************************************************************/
            /* switch文                                                               */
            /**************************************************************************/
            case "switch":
                activityElements += `switch ${statementList[i].Statement}\n`;
                break;

            case "End_switch":
                activityElements += "endswitch\n";
                break;

            /**************************************************************************/
            /* case文・default文(End_case・End_defaultは不要のため読み捨て            */
            /**************************************************************************/
            case "case":
            case "default":
                activityElements += `case ( ${statementList[i].Statement})\n`;
                break;

            /**************************************************************************/
            /* break文                                                                */
            /**************************************************************************/
            case "break":
                activityElements += "break\n";
                break;

            /**************************************************************************/
            /* return文                                                               */
            /**************************************************************************/
            case "return":
                activityElements += ` : return ${statementList[i].Statement}\n`;
                break;

            /**************************************************************************/
            /* 制御文                                                                 */
            /**************************************************************************/
            case "Statement":
                activityElements += ` : ${statementList[i].Statement}\n`;
                break;

            default:
                /* 何もしない */
                break;
        }
    }

    /**************************************************************************/
    activityElements += "stop\n";
    activityElements += "\n@enduml\n";
    
    return activityElements;
}

/*===============================================================================================================================*/
/* 変更履歴                                                                                                                      */
/*===============================================================================================================================*/
/* バージョン : 日付       : 変更者   : 変更内容                                                                                 */
/* ----------------------------------------------------------------------------------------------------------------------------- */
/* 0.0.0      : 2025/03/12 : 北原英樹 : 新規作成                                                                                 */
/*                                                                                                                               */
/*                                                                                                                               */
/*===============================================================================================================================*/
